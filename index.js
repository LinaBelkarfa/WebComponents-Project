const getBaseURL = () => {
	return new URL('.', import.meta.url);
};

class MyLogo extends HTMLElement {
    style = `
    @import url('https://fonts.googleapis.com/css2?family=Grey+Qo&display=swap');

    #logo {
      color: darkgreen;
      font-size: 40px;
      border: 5px solid green;
      background: green;
      font-family: tahoma;
      font-style: normal;
      font-weight: normal;
      border-radius: 10px;
      margin: auto;
      text-align: center;
      text-decoration: none;   
      position:relative;
      width:60%;
      animation: rotate-vert-center color-change-2x main; 
     }

  #logoContainer#logoImg{
  margin-left:60% ;  
  background: lightgreen;   
}
  #logoContainer{
    width:80%;

  }
      
    #logo > text {
      text-align: center;
    }

    #tableauOption {
      display:none;

    }

    #tableauOption.displayed {
      display:block;
    }

    #tableauOption > center > font > table {
      background: lightgreen;
      border-radius: 20px;
      
    }
    .main {
      background: lightgreen;
      height: 100px;
      width: 100%;
      display: flex;
      margin-top:5px;
    }

    .champ {
      width:220px;
  }
  
  .champ2 {
      width:180px;
      
  }


    
    .rotate-hor-center {
      -webkit-animation: rotate-hor-center 3s cubic-bezier(0.455, 0.030, 0.515, 0.955) infinite both;
              animation: rotate-hor-center 3s cubic-bezier(0.455, 0.030, 0.515, 0.955) infinite both;
    }
    .rotate-vert-center {
        -webkit-animation: rotate-vert-center 3s cubic-bezier(0.455, 0.030, 0.515, 0.955) infinite both;
                animation: rotate-vert-center 3s cubic-bezier(0.455, 0.030, 0.515, 0.955) infinite both;
    }    
    .color-change-2x {
        -webkit-animation: color-change-2x 1s linear infinite alternate both;
                animation: color-change-2x 1s linear infinite alternate both;
    }
    .color-change-3x {
        -webkit-animation: color-change-3x 2s linear infinite alternate both;
                animation: color-change-3x 2s linear infinite alternate both;
    }
    .fill{
      height: 50%;
  }

  
 ------------------------------------------ */


 /* ----------------------------------------------
 * Generated by Animista on 2021-9-19 11:50:23
 * Licensed under FreeBSD License.
 * See http://animista.net/license for more info. 
 * w: http://animista.net, t: @cssanimista
 * ---------------------------------------------- */

/**
 * ----------------------------------------
 * animation rotate-hor-center
 * ----------------------------------------
 */
@-webkit-keyframes rotate-hor-center {
  0% {
    -webkit-transform: rotateX(0);
            transform: rotateX(0);
  }
  100% {
    -webkit-transform: rotateX(-360deg);
            transform: rotateX(-360deg);
  }
}
@keyframes rotate-hor-center {
  0% {
    -webkit-transform: rotateX(0);
            transform: rotateX(0);
  }
  100% {
    -webkit-transform: rotateX(-360deg);
            transform: rotateX(-360deg);
  }
}





/* ----------------------------------------------
 * Generated by Animista on 2021-9-23 11:20:7
 * Licensed under FreeBSD License.
 * See http://animista.net/license for more info. 
 * w: http://animista.net, t: @cssanimista
 * ---------------------------------------------- */

/**
 * ----------------------------------------
 * animation rotate-vert-center
 * ----------------------------------------
 */
@-webkit-keyframes rotate-vert-center {
  0% {
    -webkit-transform: rotateY(0);
            transform: rotateY(0);
  }
  100% {
    -webkit-transform: rotateY(360deg);
            transform: rotateY(360deg);
  }
}
@keyframes rotate-vert-center {
  0% {
    -webkit-transform: rotateY(0);
            transform: rotateY(0);
  }
  100% {
    -webkit-transform: rotateY(360deg);
            transform: rotateY(360deg);
  }
}

  


/* ----------------------------------------------
 * Generated by Animista on 2021-9-20 9:29:5
 * Licensed under FreeBSD License.
 * See http://animista.net/license for more info. 
 * w: http://animista.net, t: @cssanimista
 * ---------------------------------------------- */

/**
 * ----------------------------------------
 * animation color-change-2x
 * ----------------------------------------
 */
@-webkit-keyframes color-change-2x {
  0% {
    background: darkgreen;
  }
  100% {
    background: lightgreen;
  }
}
@keyframes color-change-2x {
  0% {
    background: darkgreen;
  }
  100% {
    background: lightgreen;
  }
}




/* ----------------------------------------------
 * Generated by Animista on 2021-9-23 14:18:8
 * Licensed under FreeBSD License.
 * See http://animista.net/license for more info. 
 * w: http://animista.net, t: @cssanimista
 * ---------------------------------------------- */

/**
 * ----------------------------------------
 * animation color-change-3x
 * ----------------------------------------
 */
@-webkit-keyframes color-change-3x {
  0% {
    background: darkblue;
  }
  50% {
    background: blue;
  }
  100% {
    background: lightblue;
  }
}
@keyframes color-change-3x {
  0% {
    background: darkblue;
  }
  50% {
    background: blue;
  }
  100% {
    background: lightblue;
  }
}


/* ---------------------------------------------- */

    `;
    html = `
    <center>
    <div id="logoContainer" class="rotate-hor-center">
    <div id="logo" class="color-change-2x main"></div>
    </div>
    </center>
<br>
<br>
<br>
<br>

<button id="openSettings"> Tableau d'options </button>
<div id="tableauOption">
<center>
<font face= "Tahoma">
<table border=6px bordercolor= green> 
<th colspan="2">Attributs du Logo</th>
        <tr>
            <td>Couleur du texte :</td> 
            <td><input type="color" class="champ" id="selecteurCouleur"></td>
        </tr>
        <tr>
            <td>Taille du texte :</td>
            <td> 5 <input type="range" val=40 min=5 max=100 id="selecteurTaille"> 100</td>
        </tr>
        <tr>
            <td>Contenu du texte : </td>
            <td> <input class="champ" type=text id="selecteurText" value="Entrez du texte"></td>
        </tr>
        <tr>
            <td>Police de caractère: </td>
            <td>
            <input list="fonts" type="text" class="champ" id="selecteurFont">
                <datalist id="fonts">
                    <option value="tahoma">
                    <option value="arial">
                    <option value="times new roman">
                    <option value="calibri">
                    <option value="verdana">
                    <option value="georgia">
                    <option value="palatino">
                    <option value="sans-serif">
                </datalist>
            </td>
        </tr>
        <tr>
            <td>Style du texte : </td>
            <td align=center> 
            <button id="gras"> Gras </button>
            <button id="italic"> Italique </button>
            <button id="souligne"> Souligné </button>
            </td>
        </tr>
        <tr>
            <td> Couleur bordure :</td>
            <td><input type="color" class="champ" id="selecteurBordure"></td>
        </tr>
        <tr>
            <td>Taille du logo</td>
            <td> 30 <input type="range" val=40 min=30 max=100 id="selecteurTailleLogo"> 100</td>
        </tr>
        <tr>
            <td>Radius</td>
            <td> 1 <input class="champ2" type="range" val=40 min=1 max=50 id="selecteurRadius"> 50</td>
        </tr>
        <tr>
            <td> Sens de la rotation : </td>
            <td align=center><button id="stopAnim"> Changer de sens </button>
            <button id="stopAnimTotale"> Arrêter/Relancer </button>
            </td>
        </tr>
        <tr>
            <td> Couleur animation de fond : </td>
            <td align=center>
            <button id="changeBlue"> Bleu </button>
            <button id="changeGreen"> Vert </button>

            </td>
        </tr>
       

</table>
</font>
</center>   
</div>
    `;

    constructor() {
        super();
        // On crée le "shadow DOM"
        this.attachShadow({ mode: "open" });

        // récupérer les propriétés/attributs HTML
        this.couleur = this.getAttribute("couleur"); //couleur texte
        if(!this.couleur) this.couleur = "darkgreen";
        console.log("couleur récupérée = " + this.couleur);

        this.textContent = this.getAttribute("textContent"); //Contenu du texte
        if(!this.textContent) this.textContent = "Logo de Lina";

        this.border = this.getAttribute("borderColor");// couleur de bordure
        if(!this.border) this.border = "5px solid green";

        this.borderRadius = this.getAttribute("borderRadius");//angle radius
        if(!this.borderRadius) this.borderRadius = "20px";

        this.fontSize = this.getAttribute("size");//taille du texte 
        if(!this.fontSize) this.fontSize = "40px";

        this.fontFamily = this.getAttribute("fontFamily");//police
        if(!this.fontFamily) this.fontFamily = "calibri";

        this.fontWeight = this.getAttribute("fontWeight");//gras
        if(!this.fontWeight) this.fontWeight = "normal";

        this.fontStyle= this.getAttribute("fontStyle");//italic
        if(!this.fontStyle) this.fontStyle = "normal";

        this.textDecoration = this.getAttribute("textDecoration");//souligné
        if(!this.textDecoration) this.textDecoration = "normal";


        this.animationClass = this.getAttribute("animation");


        
        this.controls = this.getAttribute("controls");
        this.background = this.getAttribute("background");

        
    }

    connectedCallback() {
        // ici on instancie l'interface graphique etc.
        this.shadowRoot.innerHTML = `<style>${this.style}</style>`
            + this.html;

        this.logo = this.shadowRoot.querySelector("#logo");

        // affecter les valeurs des attributs à la création
        this.logo.style.color = this.couleur; //couleur du texte
        this.logo.style.border = this.border; //couleur bordure
        this.logo.textContent = this.textContent; //contenu du texte
        this.logo.style.borderRadius = this.borderRadius; //radius
        this.logo.style.fontSize = this.fontSize; // taille du texte
        this.logo.style.fontFamily = this.fontFamily; //police 
        this.logo.style.fontWeight = this.fontWeight; // gras 
        this.logo.style.fontStyle = this.fontStyle ; // italic
        this.logo.style.textDecoration = this.textDecoration; //souligné
        this.logo.style.width = this.width ;
        this.logo.classList.add(this.animationClass);//animation

        this.declareEcouteurs();
    }

    
  

    declareEcouteurs() {
      this.shadowRoot.querySelector("#selecteurCouleur")
      .addEventListener("input", (event) => {
          this.changeCouleur(event.target.value);
      });

      this.shadowRoot.querySelector("#selecteurTaille")
          .addEventListener("input", (event) => {
              this.changeSize(event.target.value);
          });

      this.shadowRoot.querySelector("#selecteurBordure")
          .addEventListener("input", (event)=> {
              this.changeBorder(event.target.value);
          });

      this.shadowRoot.querySelector("#selecteurText")
          .addEventListener("input", (event)=> {
              this.changeText(event.target.value);
          });

      this.shadowRoot.querySelector("#selecteurFont")
          .addEventListener("input", (event)=> {
              this.changeFont(event.target.value);
          });

      this.shadowRoot.querySelector('#openSettings')
          .addEventListener("click", () => {
              this.openSettings();
          });
      this.shadowRoot.querySelector('#gras')
          .addEventListener("click", (event)=> {
              this.changeWeight(event.target.value);
          });
      this.shadowRoot.querySelector('#italic')
          .addEventListener("click", (event)=> {
              this.changeStyle(event.target.value);
          });
      
      this.shadowRoot.querySelector('#souligne')
          .addEventListener("click", (event)=> {
              this.changeUnderline(event.target.value);
          });

      this.shadowRoot.querySelector("#selecteurTailleLogo")
          .addEventListener("input", (event) => {
              this.changeLogoSize(event.target.value);
          });

      this.shadowRoot.querySelector("#selecteurRadius")
          .addEventListener("input", (event) => {
              this.changeRadius(event.target.value);
          });

      this.shadowRoot.querySelector('#stopAnim')
          .addEventListener("click", () => {
              this.stopAnim();
          });
      this.shadowRoot.querySelector('#stopAnimTotale')
          .addEventListener("click", () => {
              this.stopAnimTotale();
          });
      this.shadowRoot.querySelector('#logoContainer')
          .addEventListener("click", () => {
              this.saveimg();
          });

      this.shadowRoot.querySelector('#changeBlue')
          .addEventListener("click", () => {
              this.changeBlue();
          });
      this.shadowRoot.querySelector('#changeGreen')
          .addEventListener("click", () => {
              this.changeGreen();
          });
}


  // Fonction

  //Couleur du text
  changeCouleur(val) {
    this.logo.style.color = val;
  }
  //Taille du texte
  changeSize(val) {
    this.logo.style.fontSize = val + "px";
  }
  //Couleur de bordure
  changeBorder(val){
    this.logo.style.border = 5 +"px solid"+ val;
  }
  //Couleur de background -> finalement remplacé par les animations colorés en background
  changeBackground(val){
    this.logo.style.background = val;
  }
  //Changer le contenu du texte en gardant l'image
  changeText(val){
    this.logo.innerHTML = val + String('<img class="fill" max-height=100% src="sasayeyo.JPG">');
  }

  //changer la police de charactère
  changeFont(val){
    this.logo.style.fontFamily = val;
  }
  //Texte en Italic ou non 
  changeStyle(){
    if(this.logo.style.fontStyle== "italic"){
        this.logo.style.fontStyle = "normal";
    }
    else{
        this.logo.style.fontStyle="italic";
    }
  }
  // Texte en gras ou non
  changeWeight(){
    if(this.logo.style.fontWeight== "bold"){
        this.logo.style.fontWeight = "normal";
    }
    else{
        this.logo.style.fontWeight="bold";
    }
  }
  //Texte souligné ou non 
  changeUnderline(){
    if(this.logo.style.textDecoration== "underline"){
        this.logo.style.textDecoration = "none";
    }
    else{
        this.logo.style.textDecoration="underline";
    }
  }
  //Chagner la largeur du logo 
  changeLogoSize(val){
    this.logo.style.width = val + "%";

  }
  //Arrondir les bordures à sa guise
  changeRadius(val) { 
    this.logo.style.borderRadius = val + "px";
  }

  //Afficher/Cacher le tableau d'option
  openSettings() {
    let table = this.shadowRoot.querySelector('#tableauOption')

    if(table.classList.contains('displayed')) {
        table.classList.remove('displayed')
    } else {
        table.classList.add('displayed')
    }
  }

  //Changer de sens de rotation (changement d'animation)
  stopAnim() {
    let table = this.shadowRoot.querySelector('#logoContainer')

    if(table.classList.contains('rotate-hor-center')) {
        table.classList.remove('rotate-hor-center')
        table.classList.add('rotate-vert-center')
    } 
    else{
        table.classList.remove('rotate-vert-center')
        table.classList.add('rotate-hor-center')
    }
  }

  //Arrêter/Relancer la rotation
  stopAnimTotale() {
    let table = this.shadowRoot.querySelector('#logoContainer')

    if(table.classList.contains('rotate-hor-center')) {
        table.classList.remove('rotate-hor-center')
    } 
    else if(table.classList.contains('rotate-vert-center')) {
        table.classList.remove('rotate-vert-center')
    } 
    else{
        table.classList.add('rotate-hor-center')
    }
  }

  //Mettre le theme d'animation de fond bleu
  changeBlue(){
    let table = this.shadowRoot.querySelector('#logo')
    
    if(table.classList.contains('color-change-2x')) {
        table.classList.remove('color-change-2x')
        table.classList.add('color-change-3x')
    } 
  }
  //Mettre le theme d'animation de fond vert
  changeGreen(){
    let table = this.shadowRoot.querySelector('#logo')
    
    if(table.classList.contains('color-change-3x')) {
        table.classList.remove('color-change-3x')
        table.classList.add('color-change-2x')
    } 
  }

  //Idées en plus : 
  //Fonction à faire pour charger son logo en gif ou autre
  //Rajouter changerRed qui change le fond dans les tons Rouge/rose
  //
  //saveimg(){
  //    var c = document.getElementById('logoContainer');
  //    var t = c.getContext('2d');
  //    window.location.href = image;
  //
  //    window.open('', document.getElementById('logoContainer').toDataURL());
  //}

}

customElements.define("my-logo", MyLogo);
